"We applied Bootstrap’s styles to the login page. Make
similar changes to the rest of the form-based pages including new_topic,
new_entry, edit_entry, and register"

In vs code
Ctrl + ` = open Terminal
Change to command prompt

cd .. (go up one directory)
ctrl+c = stops the server

create virtual environment:
cd [directory address]
python -m venv ll_env

activate:
ll_env\Scripts\activate

deactivate:
deactivate

install django:
pip install django

create django project:
django-admin startproject project_name .
*project_name is your choice
*don't forget the .

create database:
python manage.py migrate

view:
python manage.py runserver
http://127.0.0.1:8000
local host

If any trouble viewing the project during development:
1. activate a virtual environment: ll_env\Scripts\activate
2. reissue the command: python manage.py runserver

starting an app:
ll_env\Scripts\activate
(ll_env)project_name$ python manage.py startapp appname
appname is, in this project's case, learning_logs

want to modify the data that your project manages?
1. modify models.py (and update #My apps in settings.py) {page 386 for fields to use in a model)
in terminal:
2. python manage.py makemigrations learning_logs (replace learning_logs with appname)
3. python manage.py migrate

Each time you modify your models, you’ll need to restart the shell to see the effects of those changes.
To exit a shell session; on Windows, press ctrl-Z and then press enter
1. python manage.py shell
2. from learning_logs.models import Topic
>>> Topic.objects.all()

http://localhost:8000/admin/
ll_admin
felicia123

When you write code to access the data in your project,
you’re writing a query. Skim through the documentation for querying your data
at https://docs.djangoproject.com/en/2.2/topics/db/queries/. Much of what
you see will look new to you, but it will be very useful as you start to work on
your own projects.

Three stages of making a page:
Defining URLs, writing views, and writing templates. You can do these in any order.

sign up for heroku
install git
install heroku

Install required packages
(ll_env)learning_log$ pip install psycopg2==2.7.*
(ll_env)learning_log$ pip install django-heroku
(ll_env)learning_log$ pip install gunicorn

Create requirements.txt
(ll_env)learning_log$ pip freeze > requirements.txt

Specify the Python runtime
(ll_env)learning_log$ python --version
Python 3.10.4

runtime.txt (same directory as manage.py) write the following:
python-3.10.4

Add to settings.py
# Heroku settings.
import django_heroku
django_heroku.settings(locals())

make "Procfile" (no extension) same directory as manage.py
web: gunicorn learning_log.wsgi --log-file -

Configure git (to track the project's files)
(ll_env)learning_log$ git config --global user.name "mcocchio"
(ll_env)learning_log$ git config --global user.email "marccocchio@gmail.com"

Create .gitignore file (same directory as manage.py)
ll_env/
__pycache__/
*.sqlite3

Commit the project
(ll_env)learning_log$ git init
(ll_env)learning_log$ git add .
(ll_env)learning_log$ git commit -am "Ready for deployment to heroku."
(ll_env)learning_log$ git status
(ll_env)learning_log$

Push to Heroku
(ll_env)learning_log$ heroku login
(ll_env)learning_log$ heroku create

Check that the server process started correctly
(ll_env)learning_log$ heroku ps

Set Up the Database on Heroku
(ll_env)learning_log$ heroku run python manage.py migrate
453











